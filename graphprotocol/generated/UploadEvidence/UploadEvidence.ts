// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class UploadEvidenceEvent extends ethereum.Event {
  get params(): UploadEvidenceEvent__Params {
    return new UploadEvidenceEvent__Params(this);
  }
}

export class UploadEvidenceEvent__Params {
  _event: UploadEvidenceEvent;

  constructor(event: UploadEvidenceEvent) {
    this._event = event;
  }

  get registry(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get evidencedIdHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get evidencedHash(): string {
    return this._event.parameters[2].value.toString();
  }

  get evidenceHash(): string {
    return this._event.parameters[3].value.toString();
  }

  get evidencer(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class UploadEvidence extends ethereum.SmartContract {
  static bind(address: Address): UploadEvidence {
    return new UploadEvidence("UploadEvidence", address);
  }

  getEvidenceExistence(evidenceHash: string): boolean {
    let result = super.call(
      "getEvidenceExistence",
      "getEvidenceExistence(string):(bool)",
      [ethereum.Value.fromString(evidenceHash)]
    );

    return result[0].toBoolean();
  }

  try_getEvidenceExistence(evidenceHash: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getEvidenceExistence",
      "getEvidenceExistence(string):(bool)",
      [ethereum.Value.fromString(evidenceHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddEvidenceCall extends ethereum.Call {
  get inputs(): AddEvidenceCall__Inputs {
    return new AddEvidenceCall__Inputs(this);
  }

  get outputs(): AddEvidenceCall__Outputs {
    return new AddEvidenceCall__Outputs(this);
  }
}

export class AddEvidenceCall__Inputs {
  _call: AddEvidenceCall;

  constructor(call: AddEvidenceCall) {
    this._call = call;
  }

  get registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get evidencedHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get evidenceHash(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddEvidenceCall__Outputs {
  _call: AddEvidenceCall;

  constructor(call: AddEvidenceCall) {
    this._call = call;
  }
}
