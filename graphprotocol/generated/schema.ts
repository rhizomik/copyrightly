// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Manifestation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Manifestation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Manifestation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Manifestation", id.toString(), this);
  }

  static load(id: string): Manifestation | null {
    return store.get("Manifestation", id) as Manifestation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get authors(): Array<Bytes | null> {
    let value = this.get("authors");
    return value.toBytesArray();
  }

  set authors(value: Array<Bytes>) {
    this.set("authors", Value.fromBytesArray(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get creationTime(): BigInt {
    let value = this.get("creationTime");
    return value.toBigInt();
  }

  set creationTime(value: BigInt) {
    this.set("creationTime", Value.fromBigInt(value));
  }

  get expiryTime(): BigInt {
    let value = this.get("expiryTime");
    return value.toBigInt();
  }

  set expiryTime(value: BigInt) {
    this.set("expiryTime", Value.fromBigInt(value));
  }

  get evidenceCount(): i32 {
    let value = this.get("evidenceCount");
    return value.toI32();
  }

  set evidenceCount(value: i32) {
    this.set("evidenceCount", Value.fromI32(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get staked(): BigInt {
    let value = this.get("staked");
    return value.toBigInt();
  }

  set staked(value: BigInt) {
    this.set("staked", Value.fromBigInt(value));
  }

  get stakes(): Array<string> {
    let value = this.get("stakes");
    return value.toStringArray();
  }

  set stakes(value: Array<string>) {
    this.set("stakes", Value.fromStringArray(value));
  }
}

export class UploadEvidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UploadEvidence entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UploadEvidence entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UploadEvidence", id.toString(), this);
  }

  static load(id: string): UploadEvidence | null {
    return store.get("UploadEvidence", id) as UploadEvidence | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registry(): Bytes {
    let value = this.get("registry");
    return value.toBytes();
  }

  set registry(value: Bytes) {
    this.set("registry", Value.fromBytes(value));
  }

  get evidenced(): string {
    let value = this.get("evidenced");
    return value.toString();
  }

  set evidenced(value: string) {
    this.set("evidenced", Value.fromString(value));
  }

  get evidencer(): Bytes {
    let value = this.get("evidencer");
    return value.toBytes();
  }

  set evidencer(value: Bytes) {
    this.set("evidencer", Value.fromBytes(value));
  }

  get creationTime(): BigInt {
    let value = this.get("creationTime");
    return value.toBigInt();
  }

  set creationTime(value: BigInt) {
    this.set("creationTime", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    let value = this.get("transaction");
    return value.toBytes();
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staked(): BigInt {
    let value = this.get("staked");
    return value.toBigInt();
  }

  set staked(value: BigInt) {
    this.set("staked", Value.fromBigInt(value));
  }

  get stakes(): Array<string> {
    let value = this.get("stakes");
    return value.toStringArray();
  }

  set stakes(value: Array<string>) {
    this.set("stakes", Value.fromStringArray(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stake", id.toString(), this);
  }

  static load(id: string): Stake | null {
    return store.get("Stake", id) as Stake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): Account {
    let value = Account.load(this.get("staker").toHexString());
    return value;
  }

  set staker(value: Account) {
    this.set("staker", Value.fromString(value.id));
  }

  get item(): Manifestation {
    let value = Manifestation.load(this.get("item").toString());
    return value;
  }

  set item(value: Manifestation) {
    this.set("item", Value.fromString(value.id));
  }

  get staked(): BigInt {
    let value = this.get("staked");
    return value.toBigInt();
  }

  set staked(value: BigInt) {
    this.set("staked", Value.fromBigInt(value));
  }

  get stakable(): Address {
    let value = Address.fromHexString(this.get("stakable"));
    return value;
  }

  set stakable(value: Address) {
    this.set("stakable", Value.fromAddress(value));
  }
}
